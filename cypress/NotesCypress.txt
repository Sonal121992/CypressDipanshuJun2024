------------------------------------------------------------------------------
A) Basic
------------------------------------------------------------------------------
1. extension for cypress file is cy.js
2. always start the cypress coding with ///<reference types = "cypress"/>
3. to run the testcase we have to write in terminal ==> npx cypress open ==> 
4. then start with describe('....',function(){....}) ===> it is the global callback function to describe the test case
5. then after that it('verify....',function(){...}) ===> it is the callback function for each separate testcase within global function
6. We use AAA method means Arrangement, Action and Assertion
    a) Arrangement ===> to visit the page
    b) Actions ==> to write, click, select
    c) Assertion ==> to get the result we want

7. inside the "it" callback function we use
    a) cy.visit("...") ===> to visit the page
    b) cy.get("attribute").type() ===> this get is use to get the specific element which we want to test
    c) here we have different function to get element
        i) type ==> to write in the text box
        ii) click ==> to click on button
        iii) select ==> for dropdown

    d) cy.get("attribute for element").should('...') ===> should because we are expecting that thing
        after should we can write below words
        i) contains ===> if we want to find some part of the expected text
        ii) have.text ===> if we want to find that specific text
        iii) be.visible ==> if want to just see that element

    e) we can also write assertion as
        cy.conatins('text message').should('be.visible')
8. <input name="first_name" type="text" class="feedback-input" placeholder="First Name" fdprocessedid="r7zegn">
      ||    ||          ||
    tagname attribute  Value
--------------------------------------------------------------------------------------
B) Special Properties
--------------------------------------------------------------------------------------
1. it.only ====> To run specific test case
                In this case only this test case will run, it will not show other test case in report
2. it.skip ====> To skip specific test case 
                In this case it will run only that test case which is without skip property 
                But in report it will show all test cases we have performed


-----------------
C) Hooks 
-----------------

1) Hooks is made of 4 basic callback function
    a) before ===> it will execute first
    b) beforeEach ===> it will execute before each testcase
    c) afterEach ===> it will execute after each testcase
    d) after ===> it will execute at last always

2) Following it the structure to write the testcase by hooks method
///<reference types = "cypress"/>

before(function(){
    cy.log("I will execute first")
})

beforeEach(function(){
    cy.log("I will execute before each test case")
})
it("Test case one", function(){
    cy.log("This is test case one TC001")
})
it("Test case two", function(){
    cy.log("This is test case two TC002")
})
afterEach(function(){
    cy.log("I will execute after each test case")
})

after(function(){
    cy.log("I will execute at last")
})

3) So the above structure will execute like below
// 1. I will execute first =====================> 1st command
// 2. I will execute before each test case =====> command before test case
// 3. This is test case one TC001 ==============> it test case
// 4. I will execute after each test case ======> command after test case
// 5. I will execute before each test case =====> commnad before test case
// 6. This is test case two TC002 ==============> it test case
// 7. I will execute after each test case ======> command after test case
// 8. I will execute at last ===================> last command

4) for execution we can write "node 2.hooksBasic.cy.js" to get the result in terminal
5) Generally this beforeEach function is use to visit the webpage, as we don't have to write address again and again, if we are doing work on same page
6) with before for visit we can reduce the code for atleast one function

---------------------------------------
D) Element 
----------------------------------
1. elemenet is written as:
    a. TagName[attr = "Value"]
    b. input[name ="username"]

------------------------------
D) CSS Selectors
------------------------------
1. tagname[attr='Value'] ==> input[id="user-name"]
2. by id ==> # before id attr value ==> #user-name
3. by class ==> . before class attr value  ==> .btn_action
4. by id/Class aatr nd value ==> [attr ='Value'] ==> [name="user-name"]

-------------------------------
E) Transverse 
----------------------------------

1. Transverse consist of the DOM element like parent(), sibling(), first(), last(), eq(), etc......
2. In Transverse we form a chain to get the element 
3. it starts normally with the describe function then beforeEach to visit webpage for each it function
4. it is also a callback function
5. inside it function we will write cy.get as follows
    cy.get('.traversal-drinks-list').children().first().should('have.text','Coffee')
      a) here .traversal-drinks-list is the element
      b) then we want first element from children therefore children().first()
      c) then we are putting the assertion with should
6. This transverse is like an array indexing which start from 0
7. 0th children is first(), and the last children is last(), while from 1st is named as eq(1), 2nd as eq(2).....
8. DOM Element
    a) first() ===> oth element index ===> to find specific element with have.text ===> 
                    Get the first DOM element within a set of DOM elements.
    b) last() ===> last element index ===> to find specific element with have.text ===> 
                    Get the last DOM element within a set of DOM elements.
    c) eq(1) ===> index number 1 => eq(index) ===> to find specific element with have.text ===> 
                    Get A DOM element at a specific index in an array of elements.
    d) children() ===> element inside the parent element ==> it comes with eq(index) ===> to find specific element with have.text ===> 
                    Get the children of each DOM element within a set of DOM elements.
    e) prev() ===> to get just previous element ===> to find specific element with have.text ===> 
                    Get the immediately preceding sibling of each element in a set of the elements.
    f) next() ===> to get just after element ===> to find specific element with have.text ===> 
                    Get the immediately following sibling of each DOM element within a set of DOM elements.
    g) prevAll() ===> to get all previous element within the same parent ===> to find the length of the element with have.length  ===> 
                    Get all previous siblings of each DOM element in a set of matched DOM elements.
    h) nextAll() ===> to get all next element within the same parent ===> to find the length of the element with have.length ===> 
                    Get all following siblings of each DOM element in a set of matched DOM elements. 
    i) siblings() ===> to get all siblings within the same parent ===> to find the length of the element with have.length ===> 
                    Get all sibling DOM elements.
    j) parents() ===> to find the total parents ===> to find the length of the element with have.length ===> 
                    Get the parent DOM elements of a set of DOM elements.
    k) parentsUntil() ===> to find all sub-parents ===> to find the length of the element with have.length ===>
                    Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    l) filter() ===> to filter out some element ===> can find it with have.text ==> 
                    Get the DOM elements that match a specific selector. Opposite of .not()
    m) not() ===> to element which is not filter ===> can find it with have.length ===> 
                    Filter DOM element(s) from a set of DOM elements. Opposite of .filter()
    n) find() ===> to get element then find the another element inside that ===> 
                    Finds the descendent DOM elements with the given selector.
    m) closest() ===> Get the first DOM element that matches the selector (whether it be itself or one of its ancestors). ===>
                    Basically to find the main part from sub-part, main body part

---------------------------------------------------------
F) Radio button
---------------------------------------------------------

1. it can be click only one at a time
2. button can be check() or click()
3. but radio button can't be uncheck()
4. Generally syntax here is 

    cy.get(tagname/attr).check()
    cy.get(tagname/attr).should('be.checked')  
    cy.get(tagname/attr).should('not.be.checked')
5. Sometimes we have to do force check like below:

    cy.get('[value="hi_IN"]').click({force:true})

---------------------------------------------------------
G) Check box
---------------------------------------------------------

1. We can click multiple check box at a time
2. we can click(), check() and uncheck() both in checkbox
3. Here general syntax

    cy.get(tagname/attr).check()
    cy.get(tagname/attr).click()
    cy.get(tagname/attr).uncheck()
    cy.get(tagname/attr).should('be.checked')  
    cy.get(tagname/attr).should('not.be.checked')

----------------------------------------------------------
H) Text Element
----------------------------------------------------------

1. To get the text element on the site with log property

a) invoke()
    1. Invoke a function on the previously yielded subject.
    
        cy.get('.section_header').invoke('text').then((text)=>{
            cy.log(text) // Autocomplete TextField
        })

b) text()
    1. Get the combined text contents of each element in the set of matched elements, including their descendants.

        cy.get('.section_header').then(($el)=>{
            cy.log($el.text()) //===> Here we get more accurate ans
        })

----------------------------------------------------------
I) Dropdown
--------------------------------------------------------

1. There are 2 types of dropdown
    i) Static Dropdown
    ii) Dynamic Dropdown

i) Static Dropdown
    1. It have selected list in dropdown
    2. We use select() to select from dropdown

ii) Dynamic Dropdown
    1. It is vast list in dropdown
    2. when we type a single letter we will get the n number of list
    3. here we Generally do not get direct css selector, so we need to use ">" this sign to reach the exact selector
    4. Example:
            <div id="myInputautocomplete-list" class="autocomplete-items">
                    <div><strong>B</strong>ruscetta<input type="hidden" value="Bruscetta">
                    </div>
                    <div><strong>B</strong>acon<input type="hidden" value="Bacon">
                    </div>
                    <div><strong>B</strong>lack beans<input type="hidden" value="Black beans">
                    </div>
                    <div><strong>B</strong>agels<input type="hidden" value="Bagels">
                    </div>
                    <div><strong>B</strong>arley<input type="hidden" value="Barley">
                    </div>   
            </div>
    5. Here we cannopt reach barley direct so will css selector as follows:
        #myInputautocomplete-list > div
        // # because its id
        // this help us to reach all sub selector

    6. Now to reach specific css selector
        cy.get('#myInputautocomplete-list > div').each(function(el){
            cy.log(el.text()) //===> this will give us all list from the name 
            if(el.text()=='Barley'){
                cy.wrap(el).click()
                cy.get('#submit-button').click()
                cy.url().should('contain','Barley')
            }
        })
    7. We are representing each element with el
        then matching with the specific text
            wrapping it to click on that element from dropdown
                then submit button
                        then doing the assertion
    
    -----------------------------------------------------------------------------
    J) Task
    -----------------------------------------------------------------------------

    1. Why we use task in cypress?
        a) cy.task is used to execute a command in the Node.js environment, outside of the browser.
        b) This allows you to perform tasks that cannoyt be done directly in the browser, such as:
                i) File system operations (reading/writing files)
                ii) Network requests (making API calls)
                iii) Database interactions
                iv) Executing shell commands
                v) Accessing environment variables
        c) cy.task is useful for task like:
                i) Setting up test Data
                ii) Cleaning up after test
                iii) Verifying file contents
                iv) Triggering server-side actions
        d) By using cy.task, you can extend Cypress's capabilities and integrate it with your project's specific needs.
        e) Here's an example:
                cy.task('db:seed') // executes a task named "db:seed" in the Node.js environment
        f) This allows you to separate concerns and keep your test code focused on the browser interactions, while leveraging the power of Node.js for tasks that require it.
    
    2. we write is like regular cypress code first start with reference then
        describe('cy.task()',function(){
            it('Task example 2',function(){
                cy.task('myLog','Hi How are you')
            })
        })
    3. inside describe it block with callback function
    4. This code will not run directly, we need to do some changes in cypress.config.js file
            on('task',{
                myLog(msg){
                console.log(msg)
                return null
                }
            })

        This we have to write inside setupnode events.
        a) we have imported myLog from config file, same element should be use in both place
        b) we want that msg to be appear as result 

    5. Same will do for Task example 3

-----------------------------------------------------------------------------
4) Tables
-------------------------------------------------------------------------------

    1. In this we will do the same process with reference ==> describe ===> it
    2. then cy.visit for url to visit
    3. the let sum = 0 , because here we are doing sum of the number in Tables
    4. then first we will search for table no 1 i.e. t01
    5. in table no. 1 we will search for row i.e. tr
    6. then in row we will search for data which we want to take i.e. td 
    7. In that we want to consume last data 
    8. therefore we will do chaining like 

        cy.get('#t01').find('tr').each((row)=>{

        })
    
    9. t01 for table no 1, tr for row, then we will go for each row
    10. then we will find the td, then the text of the last 
        
        cy.log(row.find('td').last().text())

    11. Then we will write the code to sum up the number

        sum += Number(row.find('td').last().text())

        here we are finding first the row, then the td element , then the text of last element of that td

        after finding that text we are doing sum of that number

    12. Then with the code cy.log(sum) we are seeing the sum 
    13. then assertion
        
        expect(sum).to.eq(159)

        with this we are expecting the sum to be 159

    14. same for other table

-------------------------------------------------
5) Tables with function
--------------------------------------------------

    1. Here we are doing same thing as table just we are using function
    2. Here we take calculateAge as function 
    3. Then we will perform all sum calculation here in function calculateAge
    4. Then we will call this function in "it" function.
    5. as we write calculateAge(css,Esum)
        ==> here css is the html element #t01
        ==> Esum is the actual sum of the table

-------------------------------------------------------
6) Alerts
--------------------------------------------------------

    1. In this we handle the alert which pop-up during the ok and cancel function.
    2. first start with reference ===> describe ===> it ===> visit
    3. There are 3 types of alert

        a) Window for alert ==> only will have "ok" button
        b) Window for confirm ==> this will have ok and cancel button
        c) Window for prompt ==> this will inbox to write msg then ok and cancel button

    4. How to do handle alert?

    a) Window for alert

    cy.on('window:alert',function(text){
            expect(text).to.eq('I am a JS Alert')
            return true
        })

    cy.on ===> when we get the alert window
    expect(text) ==> assertion
    eq('I am a JS Alert') ==> text equal to
    return true ==> because we place OK


    ==> above is the basic code for alert

    then 

    cy.get('[onclick="jsAlert()"]').click()

    css selector here is [onclick="jsAlert()"] were we click()

5. Below is the assertion
    
    cy.get('#result').should('have.text','You successfully clicked an alert')


b) Windows for JS Confirm ==> its have ok and cancel button

    1. here also we will do all same steps describe, it, cy.visit, etc
    2. It is like below

        it('Verify the Window JS Confirm for ok',function(){
            cy.visit('https://the-internet.herokuapp.com/javascript_alerts')
            cy.on('window:confirm',function(text){
                expect(text).to.eq('I am a JS Confirm')
                return true
            })

            //trigger event
            cy.contains('Click for JS Confirm').click()
            cy.get('#result').should('have.text','You clicked: Ok')
         })
    3. for cancel we write ===> return false

    
c) Window JS Prompt ===> for writing msg and then OK
    1. If we write msg then OK, will get writen msg 
    2. If we not write msg then OK, will get null msg
    3. Here we have some changes in 

        cy.window().then(function(win){.....})
    
    4. Here we have to stub some msg inside ......
        
        it('Verify the Window JS Prompt',function(){
            cy.visit('https://the-internet.herokuapp.com/javascript_alerts')
            cy.window().then(function(win){
                cy.stub(win,'prompt').returns('I am learning cypress')
                return true
            })
            cy.get('[onclick="jsPrompt()"]').click()
            cy.get('#result').should('have.text','You entered: I am learning Cypress')
        })

    5. for null write null in returns

--------------------------------------------------------
7) IFrame
------------------------------------------------------------

    1. It is the concept were we can't opt the element directly.
    2. We have to first identify the frame element then only we can identify the elements inside it
    3. Mostly this elements are arrange in array manner
    4. We will start the coding same as cypress....
        first start with describe ==> it ===> cy.visit
    5. Then if we try to find the element directly with with css selector

        cy.get('a[href="index.html"]').should('have.text','Home')

        then it will through error that it do not find the selector

        because this selector is bound inside the frame

    6. We can find the frame with different function like
        a) with jquery function
        b) with javascript function
        c) normal function ===> with help of its function
        d) utility function ===> importing from command.js

    a) with jquery function

        1. Therefore we will find the css selector for frame

        cy.get('#frame').then(function($frame){ ------})

        2. Here the use of $ shows that we are doing it with jquery

            i) cy.log($frame.contents()) 
                ===> will give the contents which are inside the frame like head, body, etc
            ii) so from this content we will find the body because we want to work on body, and then save it to let varaible iFrameBody1
                    let iFrameBody1 = $frame.contents().find('body')

                    contents ==> Get the children of each element in the set of matched elements, including text and comment nodes.
                    find ==> Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element

            iii) Now we are wrapping this iFrameBody to iFrameBody

                    cy.wrap(iFrameBody1).as('iframe')

                    wrap ==> Yield the element passed into .wrap().
                    as ==> Assign an alias for later use. Reference the alias later within a cy.get() or cy.wait() command with a @ prefix. You can alias DOM elements, routes, stubs and spies.

            iv) now we will get this iframe element which we have defined earlier and then will find the DOM elements from it

                       cy.get('@iframe').find('a[href="index.html"]').should('have.text','Home')


    b) WIth JavaScript function

        1. Here we will not use the $ sign instead will write only frame 
        2. As this is javascript so we can access array in the frame
        3. So here we are introducing the frame variable in .then function

            cy.get('#frame').then(function(frame){.....})

        4. Then inside that we will perform all array function
        5. like below:

             cy.log(frame[0].contentDocument.body)

             i) Here frame[0] is for 1st index number, that means first frame
             ii) Then we want to find the contents from body
             ii) so here we are chaining the function to get the element we want

        6. Now we are saving chained function with let variable in iFrameBody2
        7. Then we will wrap that iFrameBody2 and named it as iframe

                cy.wrap(iFrameBody2).as('iframe')
        
        8. Then we will call this iframe with @ sign to get the css selector and assertion

    c) By using its function

        1. here after visit we are saving the the whole content into a let variable iFrameBody3

            let iFrameBody3 = cy.get('#frame').its('0.contentDocument.body').then(cy.wrap)

            i) get ===> #frame
            ii) its ===> Get a property's value on the previously yielded subject.
            iii) 0 for 1st index of array, contentDocument.body for body ,
            iv) then ==> Enables you to work with the subject yielded from the previous command.
            v) wrap ==> Yield the element passed into .wrap().
            vi) here we are chaining the function one after another 

        2. Now we are finding the css selector 

             iFrameBody3.find('a[href="index.html"]').should('have.text','Home')

             i) we called iFrameBody3 from above 
             ii) Then find the css selector 
             iii) then assertion

    d) By using utility function

        1. Here first we will do visit
        2. we will defined this getIFrameBody from command.js

            Cypress.Commands.add('getIFrameBody',(css)=>{
                return cy.get(css).its('0.contentDocument.body').then(cy.wrap)
            })

        3. This getIFrameBody is not imported to utility function
        
            cy.getIFrameBody('#frame').find('a[href="index.html"]').should('have.text','Home')

            i) defined wala variable getIFrameBody me #frame import karo
            ii) usme css selector find karo 
            ii) then assertion karo

        4. we can even use this function for other website frame
        5. just like we use the same command function for letKodeIt website

---------------------------------------------------------------
8) ShadowDom
---------------------------------------------------------------

    1. Some time the actual code is written under some shadowed code
    2. This shadowed code is called ShadowDom.
    3. So here we cannot directly find the element in search box
    4. We need to mention shadow root everytime while working on code.
        a) This is for Pattern One

        cy.get('shadow-signup-form').shadow().find('[name="username"]').type('Sonal')
        cy.get('shadow-signup-form').shadow().find('[name="email"]').type('sonalkhante@gmail.com')
        cy.get('shadow-signup-form').shadow().find('[name="password"]').type('khante99')
        cy.get('shadow-signup-form').shadow().find('[name="confirm_password"]').type('khante99')
        cy.get('shadow-signup-form').shadow().find('[type="button"]').click()

    5. We will do everything same as we do while doing contactUs form only we need to add shadow() in it.
    6. shadow() ===> Traverse into an element's shadow root.

        b) This is for Pattern two

        cy.visit('https://www.lambdatest.com/selenium-playground/shadow-dom')
        cy.get('[name="username"]',{includeShadowDom:true}).type('Sonal')
        cy.get('[name="email"]',{includeShadowDom:true}).first().type('sonalk@gmail.com')
        cy.get('[name="password"]',{includeShadowDom:true}).type('sonal1992')
        cy.get('[name="confirm_password"]',{includeShadowDom:true}).type('sonal1992')
        cy.get('[type="button"]',{includeShadowDom:true}).click()

    7. {includeShadowDom:true} ===> so instead of shadow-signup-form we will use includeShadowDom: true
    8. This will help us to execute the shadowed test cases.

------------------------------------------------------------
9) MultiTabWindow
------------------------------------------------------------
    1. Here we learn to how to work with mutli-tab and mutli-window.

    a) Verify multi-tab href attribute.
        1. when click on opentab then when it gets open.
        2. When click button new link will open in same tab.
        3. the reference address will include '/courses'.

            cy.visit('https://www.letskodeit.com/practice')
            cy.get('#opentab').should('have.attr','href').and('include','/courses')
    
    b) Verify multi-tab without removing target attribute.
        1. Here on clicking on link then it will get open in new tab.
        2. To open the window in new tab.
        3. we need to write ===> newTab.prop('href)
      
            cy.visit('https://www.letskodeit.com/practice')
            cy.get('#opentab').then(function(newTab){
            let url = newTab.prop('href')
            cy.visit(url)
            cy.url().should('contain','/courses')
            })

    c) Verify multi-tab by removing target attribute in rahul shetty site
        1. invoke() ===> Invoke a function on the previously yielded subject.
        2. With the remove attribute target we are opening it in same link.

            cy.visit('https://rahulshettyacademy.com/AutomationPractice/')
            cy.get('#opentab').first().invoke('removeAttr','target').click()
            cy.url().should('contain','qaclickacademy')

    d) Verify multi-tab without removing target attribute
        1. Without removing target attribute ==> it will open in new tab
        
        cy.visit('https://rahulshettyacademy.com/AutomationPractice/')
        cy.get('#opentab').first().then(function(newTab1){
            let url1 = newTab1.prop('href')
            cy.visit(url1)
            cy.url().should('contain','qaclickacademy')
        })

    e) Verify multi-window for letKodeIt
        1. On clicking on the button, it will get open a new window.
        2. But for this we have to through a command cy.window()
        3. with .then(win) means after we click on window.
        4. cy.stub() ===> Stubs single method of an object.
        5. we stub, to call to open a new window.
        6. win.location.href = url ===> location of new window.

        cy.visit('https://www.letskodeit.com/practice')
        cy.window().then((win)=>{
        cy.stub(win,'open').callsFake((url)=>{
                win.location.href = url
            })
        })
        cy.get('#openwindow').click()
        cy.url().should('contain','/courses')

---------------------------------------------------------------
10) fileUpload
---------------------------------------------------------------

    a) Verify the single upload
        1. When need to give path of the file we want to upload.
        2. Get the element were we want to upload the file.
        3. After we upload we need to submit it.
        4. When we click on the submit button we will get the alert message.
        5. cy.on() ==> it is the alert pop up for submit.

            cy.on('window:alert',function(text){
                expect(text).to.eq('Your file has now been uploaded!')
                return true
            })
        6.
        
            cy.visit('https://www.webdriveruniversity.com/File-Upload/index.html')
            let path1 = 'C:/Sonal/Minskole/CypressDipanshuJun2024/cypress/e2e/3.Practice/15.FileUpload/fileUpload.txt' // reverse the oblique sign from \ to /
            cy.get('#myFile').selectFile(path1)

            // Here we use cy.on because on click we get new window therefore cy.on
            cy.on('window:alert',function(text){
                expect(text).to.eq('Your file has now been uploaded!')
                return true
            })
            cy.get('#submit-button').click()
            cy.url().should('contain','fileUpload.txt')

    
    b) Verify the multiple upload
        1. For multiple upload we have to give different path.
        2. To put the multiple file on the upload we have to put them at different varaible with different link.
        3. then to access different path in one go, we have to write in array.
        4. selectFile([path1,path2,path3]) ===> array of different path

            cy.visit('https://www.zoho.com/in/books/accounting-software-demo/#/salesorders/new')
            let path1 = 'C:/Sonal/Personal/Novika/St.Paul/Nursery/Colouring Sheet - Assessment 1 (1).pdf'
            let path2 = 'C:/Sonal/Personal/Novika/Kidzee Project/Action Chart (1).pdf'
            let path3 = 'C:/Sonal/Personal/Novika/Kidzee Project/Family Tree.pdf'
            cy.get('input[type="file"]').first().selectFile([path1,path2,path3])
            cy.get('[id="ember355"]').should('contain','3')
    
--------------------------------------------------------------------
11) Read Write 
--------------------------------------------------------------------

    1. To Read and Write file.
    2. first define the string in a varaible. like str1.
    3. then cy.readFile() ==> in this give the link of the file which we want to read.
    4. with cy.log(data) ===> we will get the data in console.

        let str1 = 'Novika'
        let str2 = 'Khante'


        // reading the file
        cy.readFile('C:/Sonal/Minskole/CypressDipanshuJun2024/cypress/e2e/3.Practice/17.ReadWriteFile/File/InfoText .txt').then((data)=>{
            cy.log(data)
    
    5. then cy.writeFile() ==> now give the link of the file were we want to write data.
    6. then provide the varaible what we want to enter in that file.
    7. Then read the data.

        cy.writeFile('C:/Sonal/Minskole/CypressDipanshuJun2024/cypress/e2e/3.Practice/17.ReadWriteFile/File/InfoText .txt',str1)
        //cy.writeFile('C:/Sonal/Minskole/CypressDipanshuJun2024/cypress/e2e/3.Practice/17.ReadWriteFile/File/InfoText .txt',str2)
        cy.readFile('C:/Sonal/Minskole/CypressDipanshuJun2024/cypress/e2e/3.Practice/17.ReadWriteFile/File/InfoText .txt').then((data)=>{
            cy.log(data)
        })

    8. Same we have tried with flipkart site.
    9. From this site we can write the data from search field.
    10. Then export the data into excel sheet.
    11.Then that data is converted into text.
    12. with this ₹ sign is converted blank space.
    13. , is also replace with blank space.
    14. Then collect the data in which  price < 70000
    15. Then put the data at different column name ===> anme and price ==> now flag it a+ ==> a+ means to shift to new row.

------------------------------------------------------------------------
12) Find browser
-------------------------------------------------------------------------

    1. Here with find the browser.
    2. We find the browser specification here.
    3. We get here different details about our browser. 

        cy.visit('https://webdriveruniversity.com/Contact-Us/contactus.html')
        cy.log(`Running in ${Cypress.browser.name}`) // Running in chrome // ww will get the browser name were we are running
        cy.log(`Browser family ${Cypress.browser.family}`) // Browser family chromium
        cy.log(`Browser version ${Cypress.browser.version}`) // Browser version 127.0.6533.89
        cy.log(`Browser major version ${Cypress.browser.majorVersion}`) // Browser major version 127
        if(Cypress.browser.name === 'edge'){
            cy.log('edge')
        }

----------------------------------------------------------------------------
13) Drag Drop, Double CLick, Mouse Over, Click and Hold
----------------------------------------------------------------------------

    1. mousedown ==> to press the mouse.
    2. movermove ==> to drag or move the mouse.
    3. mouseup ==> to release the mouse.
    4. {which: 1} and {button: 1} ==> for left button of mouse.
    5. {which: 2} and {button: 2} ==> for right button of mouse.
    6. trigger ==> Trigger an event on a DOM element. / to do some action.
    7. dblclick ==> if want to click 2 times of on same button.
    8. invoke ==> Invoke a function on the previously yielded subject.
    9. {force: true} ==> Forces the action, disables waiting for actionability

        a) Verify Drag and Drop process
            i) first click with mousedown then 
            ii) drag with mousemove
            iii) then drop the box with mouseup 
            iv) we will see the changes as assertion

            cy.visit('https://webdriveruniversity.com/Actions/index.html')
            cy.get('[id="draggable"]').trigger('mousedown',{which:1}) 
            
            // {which:1} ===> for 1st button ==> left button // mousedown to press button
            cy.get('[id="droppable"]').trigger('mousemove',{which:1}).trigger('mouseup',{force: true}) 
            
            // mousemove ==> to move the block //mouseup ==> to release the button
            cy.get('p[style="background-color: rgb(244, 89, 80); height: 100%;"]>b').should('have.text','Dropped!') // assertion

            cy.get('[id="draggable"]').trigger('mousedown',{button:1})
            cy.get('[id="droppable"]').trigger('mousemove',{button:1}).trigger('mouseup',{force: true})
            cy.get('p[style="background-color: rgb(244, 89, 80); height: 100%;"]>b').should('have.text','Dropped!')

        b) Verify Double Click
            i) for this one element dblclick ==> this will automatically double click the event.
            ii) on this double click trigger we will see the changes which will be our assertion.

                cy.visit('https://webdriveruniversity.com/Actions/index.html')
                cy.get('[id="double-click"]').should('not.have.class','double') // Because at 1st we don't have double keyword in class
                cy.get('[id="double-click"]').trigger('dblclick',{which:1})
                cy.get('[id="double-click"]').should('have.class','double')// on dbl click we get that double keyword in class.
                cy.get('[id="double-click"]').trigger('dblclick',{which:1})
                cy.get('[id="double-click"]').should('not.have.class','double')

        c) Verify Mouse Hover
            i) On moving the mouse over the element we will get the changes.
            ii) 

                cy.visit('https://webdriveruniversity.com/Actions/index.html')
                cy.get('[class="list-alert"]').first().should('not.be.visible')
                //cy.contains('Hover Over Me First!').trigger('mouseover')
                //cy.contains('Hover Over Me First!').invoke('show')
                cy.get('[class="dropdown-content"]').first().invoke('show')
                cy.get('[class="list-alert"]').first().should('be.visible')
                cy.get('[class="list-alert"]').first().click()
                cy.on('window:alert',function(text){
                    expect(text).to.eq('Well done you clicked on the link!')
                    return true
                })  

        d) Verify the click and Hold
            i) to click and hold mousedown and to release mouseup
            ii) We will see the changes when we click and hold
            ii) and also after we relase the key

                cy.visit('https://webdriveruniversity.com/Actions/index.html')
                //cy.get('[id="click-box"]').should('contains','Click and Hold!')
                cy.get('[id="click-box"]').trigger('mousedown',{button:1}).should('contains','Well done!')
                cy.get('[id="click-box"]').trigger('mouseup',{button:1}).should('have.text','Dont release me!!!')
    
-----------------------------------------------------------------------------
14) Excel Data import
-----------------------------------------------------------------------------
    1. when we are working with excel sheet then, we have install node-xlsx with command in terminal ===> npm install node-xlsx --save
    2. Then only this code will run further
    3. define parseXlsx in command.js file of support folder
    
        Cypress.Commands.add('parseXlsx',(inputFile)=>{
        return cy.task('parseXlsx',{filePath: inputFile})
        })

    4. also update the information in cypress.config.js file
    
        // // ---------- exceldata ---------------
        const xlsx = require('node-xlsx').default;
        const fs = require('fs');
        const path = require('path');
    
    5. Then under e2e we have to write

        //---------------exeldata--------------

        on('task', verifyDownloadTasks); //file download option
    
    5. Mostly for excel data the code is already written in cypress.config.js filr ==> we just need to uncommit it.

    6. Now we have import parseXlsx from command.js as a method.
    7. In this method give the link of Excelpayload.xlsx from fixture file. 
    8. Reverse the slash from link.

        cy.parseXlsx('C:/Sonal/Minskole/CypressDipanshuJun2024/cypress/fixtures/exelPayload.xlsx').then((jsonData)=>{
            // change the \ to /
            cy.log(jsonData[0].data)
            //cy.log(jsonData[0].data[1][0])

            for(let i=1; i<jsonData[0].data.length; i++){
                cy.visit('https://webdriveruniversity.com/Contact-Us/contactus.html')
                //                                                 row column
                cy.get('[name="first_name"]').type(jsonData[0].data[i][0])
                cy.get('[name="last_name"]').type(jsonData[0].data[i][1])
                cy.get('[name="email"]').type(jsonData[0].data[i][2])
                cy.get('[name="message"]').type(jsonData[0].data[i][3])
                cy.get('[type="submit"]').click()
                cy.get('h1').should('have.text','Thank You for your Message!')
            }
        })

    7. jsonData[0] ==> means sheet 1
    8. then data[i][0] ==> Here i is row and 0 is column.
    9. Means we have to take data from any specific row and column will change for that row.
    10. Like this we will import n number of data from excel sheet and perform our action.
    11. This will even reduce our code. we don't have to write different code for different data.

----------------------------------------------------------------------------------
15) File download
-----------------------------------------------------------------------------------

    1. To download file from webpage.
    2. We can do download by 2 ways
        a) cy.readFile()
        b) by plugin ==> cy.verifyDownload()

    a) verify download file by cy.readFile()

        cy.visit('http://autopract.com/selenium/download.html')
        cy.get('.mydownload').click()
        cy.readFile('cypress/downloads/sample.csv', {timeout: 6000}).should('contain','Month') 


        i) First visit the webpage
        ii) Then get the element from were we want to download. then click()
        iii) with cy.readFile give the location and name of the file were we want to save.
        iv) csv ==> ek read karege and baar baar rewrite karenge
        v) Jo csv file humne liya hai waha hum write karenge
        vi) Humne jo location diya hai waha wo download ho jaega.

    b) Verify File Download file by plugin

        cy.visit('http://autopract.com/selenium/download.html')
        cy.get('#download').click()
        cy.verifyDownload('sample2.csv')

        i) First visit webpage.
        ii) Then with the find element and get it and click it.
        iii) Here only file name requires.
        iv) to download we have to write below command in e2e.js

            require('cy-verify-downloads').addCustomCommand(); //file download option

        v) When we have already written the plugin in e2e.js then we don't have to write path were we want to save the file.
        vi) we just need to give the csv file name, by which name we want to download file.

---------------------------------------------------------------------------------------
16) fixtures
---------------------------------------------------------------------------------------
    1. Generally we put the data in the contactUs form directly through code.
    2. As given in first test case in fixture.
    3. In second test case we have define the data before with a varaible and then we have used it in the testcase.
    4. In third testcase we have defined the data in the fixture file.
            from fixture file we have imported the data using below method:
                cy.fixture

        cy.fixture("contact1").then(function(user){
            cy.visit('https://webdriveruniversity.com/Contact-Us/contactus.html')

            cy.get('[name="first_name"]').type(user.firstName)
            cy.get('[name="last_name"]').type(user.lastName)
            cy.get('[name="email"]').type(user.email)
            cy.get('[name="message"]').type(user.msg)
            cy.get('[type="submit"]').click()

            cy.get('h1').should('have.text','Thank You for your Message!')
        })

    5. Here we have written data in contact1 file which is in json format.
    6. Now with method we have imported the data
        cy.fixture(contact1).then(function(user))
    7. We have use call back function were we have defined the user.
    8. So while getting the data we will write user.firstName 
    9. This firstName we write after user should be same as fixture file.
    10. Same we can do for multiple data ====>
        i) Multiple Data    
            1. For this we will define the multiple data in array form.
            2. For each data we will give the name like userOne and userTwo.
            3. Here we will get the data for each element by the path like 
                user.userTwo.firstName
            user ==> main array
            userTwo ==> subpart of the array
            firstName ===> is the data we want

        cy.fixture("contact2").then(function(user){
            cy.visit('https://webdriveruniversity.com/Contact-Us/contactus.html')

            cy.get('[name="first_name"]').type(user.userTwo.firstName)
            cy.get('[name="last_name"]').type(user.userTwo.lastName)
            cy.get('[name="email"]').type(user.userTwo.email)
            cy.get('[name="message"]').type(user.userTwo.msg)
            cy.get('[type="submit"]').click()

            cy.get('h1').should('have.text','Thank You for your Message!')
        })


    b) Fixture import
        i) In the previous example we have use the fixture method. that is cy.fixture()
        ii) Now in this we have imported fixture with import word like below:

            import user1 from "../../fixtures/contact1.json" // single payload
            import user2 from "../../fixtures/contact2.json" // multiple payload defined with varaible name
            import user3 from "../../fixtures/contact3.json" // multiple payload given in a array 

        a) For single user import
            i) After it statement call back function.
            ii) use ===> directly user1 to call the data from fixture.
            iii) Since for single data we have use user1 as varaible.
            iv) Here we will get single test case in run.

        b) multiple payload defined with varaible name.
            i) After it statement with call back function.
            ii) use ==> for(let keys in user2) ===> Here user2 is varaible we use to import multiple data which is in normal format from fixture.
            iii) This data in contact2.json is written in string format were one data is define with userOne and other data is define with userTwo.
            iv) with key keyword we can access both the data for this testcase.

            But

            v) Here we can run all payload in single test case...means we can't verify if there is problem in some of the payload
            vi) we can't verify the exact problem in specific payload
            
            Therefore we will define it with forEach Payload.

        
        c)  Verify contact3 form with forEach function ====> multiple payload given in a array 
            i) In user3 import varaible we have use multiple data but in array form.
            ii) Now since the data is arrange in array format ==> then to access the data in array we have to use forEach method.
            iii) SO we will write 
                    user3.forEach(function(el){......})
            iv) el is the pararmeter for each element we want to import for specific data.
            v) In the curly bracket we will write our normal get code to execute the testcase.
                    cy.get('[name="first_name"]').type(el.firstName)
            vi) This will run 1st tym for 1st data then 2nd tym for 2nd set of data.
            vii) but in execution we will see only one test case for multiple data.
            viii) This is problem we don't want.
            ix) we want multiple testcase for multiple data use only single set of code.
            x) Therefore we will use index pararmeter

        d) Verify the contact3 form for user ${index+1} ===> multiple payload given in a array 
            i) For this we will write the it statement inside the callback function with forEach method.
                    ====> We have written this first because we want each testcase for different user.

                    user3.forEach(function(el,index){........})
            
            ii) Now inside this callback function we will write it statement as follows:

                    it.only(`Verify the contact3 form for user ${index+1}`,function(){.......})

            iii) We have written the statement inside it with back ticks.
            iv) Because as per array function el is for element and index is for data position which start from 0.
            v) if we want spearate results then the statement for different testcase should be different.
            vi) SO as the data increase by 1 then testcase statement index will also get increase by 1.
            vii) Means each data will have different testcase name.
            ix) Then inside it testcase we will write our normal test code.

                    cy.visit('https://webdriveruniversity.com/Contact-Us/contactus.html')
                    cy.get('[name="first_name"]').type(el.firstName)
                    cy.get('[name="last_name"]').type(el.lastName)

---------------------------------------------------------------------------------------
17) Intercept
---------------------------------------------------------------------------------------
    
    1. Why we use Intercept ???? 
    1. Boht sara code kaam karne ke liye.
    2. Intercept ye ===> mocking and stubing me response and generate karne ke liye.
    3. Wait command kaam karne ke liye.
    4. Intercept is a part of API Testing.
    5. API testing >>>>>>> Intercept me >>>>>> event par click karne ke baad hi work karta hai.
    6. Yaha hum request check karte hai.

    Method ===> How to get the request url???

    Inspect me jakar >>>>>>> network par click karo >>>> UI par render hoga body ka msg

    html >>>>> http request 

    7. Intercept kyu use karte hai >>>>> jab response render hi nai ho raha n baad ka code run ho raha >>>>> to error aayega

    8. Aise samay wait use karna padega >>> jo ki ethical nai hai >>> esiliye intercept use karenge.

    9. Network me jana...then button par click karna ...tab hume network me movements dikhenge.
    10. us time niche kuch comments aayenge.
    11. click karo 1 par. then usme >>>> Headers, Preview, Response dikhenge waha se url copy karna and method bhi check karna

    12. Fixture me hume interceptData.json naam ki file banani hai. Jisse hum data lenge intercept me update karne ke liye.

    13. Then import data from fixture file.

        import interData from "../../fixtures/2interceptData.json"

        a) Verify getComment
            i) first visit the site.
                    cy.intercept({ // network me sabse niche 1 me milega
                        url: 'https://jsonplaceholder.cypress.io/comments/1',
                        method: 'GET'
                    },{
                        body: interData
                        // {
                        //     "postId": 1,
                        //     "id": 1,
                        //     "name": "sonal",
                        //     "email": "sonall@gmail.com",
                        //     "body": "I am learning Cypress"
                        //  } ===> This we have put in 2interceptData.json ==> as a fixture file
                    }).as('getComment')
                    cy.contains('Get Comment').click()
                    cy.wait('@getComment').then((res)=>{
                        cy.log(res)
                        expect(res.response.body.name).to.eq(interData.name)
                    })
                        cy.get('[class="network-comment"]').should('contain',interData.body)

            ii) As we have imported data from fixture with varaible name interData.
            ii) So here in this program we will pass input to body as interData.
            iii) res.response.body.name ===> result me response ke body ka name
            iv) yaha hum check kar rai hai ki response me body ka name interData ke body ke name se match hota ya nai.
            v) then same body name hume Get Comment par click par milna chahiye.

        b) verify postComment
            i) first visit the site.
            ii) 
                cy.intercept({// network me sabse niche dekhna comment me
                    url:'https://jsonplaceholder.cypress.io/comments',
                    method : 'POST'
                // },{
            //     body:
            //     {
            //         "name": "Novika",
            //         "email": "sonall@gmail.com",
            //         "body": "i am learning python",
            //         "id": 501
            //       }
            }).as('postComment')
            cy.contains('Post Comment').click()
            cy.wait('@postComment').then((res2)=>{
                cy.log(res2)
                expect(res2.response.statusCode).to.eq(201)// yaha status code check kar rai hai
            })
            cy.get('[class="network-post-comment"]').should('have.text','POST successful!')


            iii) Yaha post check kar rai hai...jo humne upar likha GET kiya wo hum ab POST kar rai hai.
            iv) POST ka status code 201 hai jo hum yaha expect kar rai hai.

        c) Verify Update Comment
            i) Now here we will update the new name.
            ii) PUT is use to update the data.

                cy.intercept({// network me sabse niche dekhna 1 me
                    url: 'https://jsonplaceholder.cypress.io/comments/1',
                    method: 'PUT'
                }).as('updateComment')
                cy.contains('Update Comment').click()
                cy.wait('@updateComment').then((res)=>{
                    cy.log(res)
                    expect(res.response.body.name).to.eq('Using PUT in cy.intercept()')// name ko update kar rai hai
                    // eq ka sentence click karne ke baad network me jakar payload se laaya hai
                })

            iii) take the url from network.
            iv) after doing the update we will get the required changes we want.

